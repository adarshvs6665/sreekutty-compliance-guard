AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app - Compliance Violations Demo

Globals:
  Function:
    Timeout: 3
    LoggingConfig:
      LogFormat: JSON

Resources:
  #############################################
  ## Existing Function from Boilerplate
  #############################################
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: demo-app/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts

  #############################################
  ## 1. Lambda with Full IAM Access (❌)
  ## Violates: Principle of Least Privilege (HIPAA, SOC 2)
  #############################################
  BadIAMLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: demo-app/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Policies:
        - Statement:
            - Effect: Allow
              Action: "*"
              Resource: "*"
      Environment:
        Variables:
          SSN: "123-45-6789"  # PII in env var → ❌
          EMAIL: "patient@example.com"  # More PII → ❌
          PASSWORD: "hardcoded123"  # Hardcoded secret → ❌
      Events:
        HelloBadIAM:
          Type: Api
          Properties:
            Path: /bad-iam
            Method: get

  #############################################
  ## 2. Public S3 Bucket (❌) - FIXED VERSION
  ## Violates: Data privacy (HIPAA, GDPR)
  #############################################
  PublicS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "public-demo-bucket-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # Bucket policy to make it truly public (❌)
  PublicS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PublicS3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${PublicS3Bucket}/*"

  #############################################
  ## 3. Unencrypted S3 Bucket (❌)
  ## Violates: Encryption at rest (HIPAA, PCI-DSS)
  #############################################
  UnencryptedS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "unencrypted-demo-bucket-${AWS::AccountId}-${AWS::Region}"
      # Explicitly no BucketEncryption block → ❌

  #############################################
  ## 4. S3 Without Versioning (❌)
  ## Violates: No data backup (HIPAA, SOC 2 Availability)
  #############################################
  UnversionedS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "unversioned-demo-bucket-${AWS::AccountId}-${AWS::Region}"
      VersioningConfiguration:
        Status: Suspended  # ❌ Versioning disabled

  #############################################
  ## 5. API Without Access Logs (❌)
  ## Violates: HIPAA Audit Controls §164.312(b), SOC 2
  #############################################
  ApiWithoutLogging:
    Type: AWS::Serverless::Api
    Properties:
      Name: NoLoggingAPI
      StageName: prod
      # AccessLogSetting omitted → no logging ❌

  LambdaWithoutAuditLogging:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: demo-app/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Events:
        NoLogEvent:
          Type: Api
          Properties:
            Path: /nolog
            Method: get
            RestApiId: !Ref ApiWithoutLogging

  #############################################
  ## 6. Lambda with Input Validation Issues (❌)
  ## Violates: OWASP Top 10, PCI-DSS 6.5.1, HIPAA
  #############################################
  VulnerableLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: demo-app/
      Handler: vulnerable.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          DB_PASSWORD: "admin123"  # Another hardcoded secret ❌
      Events:
        VulnerableApi:
          Type: Api
          Properties:
            Path: /vulnerable
            Method: post

  #############################################
  ## 7. Overly Permissive Security Group (❌)
  ## Violates: HIPAA, GDPR, PCI-DSS
  #############################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']

  OverlyPermissiveSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group with overly broad access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # ❌ SSH open to the world
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0  # ❌ Database port open to the world
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0  # ❌ All traffic allowed

  #############################################
  ## 8. RDS Without Encryption (❌)
  ## Violates: HIPAA, PCI-DSS encryption requirements
  #############################################
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PublicSubnet
        - !Ref PublicSubnet2

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']

  UnencryptedRDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: unencrypted-db
      DBInstanceClass: db.t3.micro
      Engine: mysql
      MasterUsername: admin
      MasterUserPassword: "hardcoded-password-123"  # ❌ Hardcoded password
      AllocatedStorage: 20
      StorageEncrypted: false  # ❌ No encryption
      PubliclyAccessible: true  # ❌ Publicly accessible
      VPCSecurityGroups:
        - !Ref OverlyPermissiveSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 0  # ❌ No backups

  #############################################
  ## 9. CloudWatch Logs Without Encryption (❌)
  ## Violates: HIPAA, PCI-DSS
  #############################################
  UnencryptedLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/unencrypted-logs
      RetentionInDays: 1  # ❌ Very short retention
      # KmsKeyId omitted → no encryption ❌

  #############################################
  ## Application Insights (unchanged)
  #############################################
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

Outputs:
  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn
  PublicS3BucketName:
    Description: Public S3 bucket for testing
    Value: !Ref PublicS3Bucket
  VulnerableEndpoints:
    Description: API endpoints for vulnerability testing
    Value: !Sub "https://${ApiWithoutLogging}.execute-api.${AWS::Region}.amazonaws.com/prod/"